head(ratedata)
#order dates
ratedata <- ratedata[order(ratedata$DATE), ]
# plot time series
plot(ratedata$DATE, ratedata$Price, type = "l")
## Forecast with ARIMA model
forecastArima <- function(x, n.ahead=10){
myTs <- ts(x$Price, start=1, frequency=256)
fit.arima <- arima(myTs, order=c(0,0,1))
fore <- forecast(fit.arima, h=n.ahead)
plot(fore)
upper <- fore$upper[,'95%']
lower <- fore$lower[,'95%']
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)),
#pred = c(trend, pred),
pred = c(rep(NA, nrow(x)), pred),
lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper),
date = c(x$Date, max(x$Date) + (1:n.ahead))
)
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 30)
plotForecastResult <- function(x, title=NULL) {
x <- x[order(x$date),]
max.val <- max(c(x$actual, x$upper), na.rm=T)
min.val <- min(c(x$actual, x$lower), na.rm=T)
plot(x$date, x$actual, type="l", col="grey", main=title,
xlab="Time", ylab="Exchange Rate",
xlim=range(x$date), ylim=c(min.val, max.val))
grid()
lines(x$date, x$trend, col="yellowgreen")
lines(x$date, x$pred, col="green")
lines(x$date, x$lower, col="blue")
lines(x$date, x$upper, col="blue")
legend("bottomleft", col=c("grey", "yellowgreen", "green", "blue"), lty=1,
c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
}
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
## Forecast with ARIMA model
forecastArima <- function(x, n.ahead=30){
myTs <- ts(x$Price, start=1, frequency=256)
fit.arima <- arima(myTs, order=c(0,0,1))
fore <- forecast(fit.arima, h=n.ahead)
plot(fore)
upper <- fore$upper[,'95%']
lower <- fore$lower[,'95%']
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)),
#pred = c(trend, pred),
pred = c(rep(NA, nrow(x)), pred),
lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper),
date = c(x$Date, max(x$Date) + (1:n.ahead))
)
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 30)
## Forecast with ARIMA model
forecastArima <- function(x, n.ahead=30){
myTs <- ts(x$Price, start=1, frequency=256)
fit.arima <- arima(myTs, order=c(0,0,1))
fore <- forecast(fit.arima, h=n.ahead)
plot(fore)
upper <- fore$upper[,'95%']
lower <- fore$lower[,'95%']
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)),
#pred = c(trend, pred),
pred = c(rep(NA, nrow(x)), pred),
lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper),
date = c(x$DATE, max(x$DATE) + (1:n.ahead))
)
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 30)
## Forecast with ARIMA model
forecastArima <- function(x, n.ahead=10){
myTs <- ts(x$Price, start=1, frequency=256)
fit.arima <- arima(myTs, order=c(0,0,1))
fore <- forecast(fit.arima, h=n.ahead)
plot(fore)
upper <- fore$upper[,'95%']
lower <- fore$lower[,'95%']
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)),
#pred = c(trend, pred),
pred = c(rep(NA, nrow(x)), pred),
lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper),
date = c(x$DATE, max(x$DATE) + (1:n.ahead))
)
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 10)
forecastArima <- function(x, n.ahead = 30) {
myTs <- ts(x$Price, start = 1, frequency = 366)
fit.arima <- arima(myTs, order = c(0, 0, 1))
fore <- forecast(fit.arima, h = n.ahead)
plot(fore)
upper <- fore$upper[, "95%"]
lower <- fore$lower[, "95%"]
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)), pred = c(rep(NA, nrow(x)), pred), lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper), date = c(x$DATE, max(x$DATE) + (1:n.ahead)))
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 30)
forecastArima <- function(x, n.ahead = 30) {
myTs <- ts(x$Price, start = 1, frequency = 366)
fit.arima <- arima(myTs, order = c(0, 0, 1))
fore <- forecast(fit.arima, h = n.ahead)
plot(fore)
upper <- fore$upper[, "95%"]
lower <- fore$lower[, "95%"]
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)), pred = c(rep(NA, nrow(x)), pred), lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper), date = c(x$DATE, max(as.Date(x$DATE)) + (1:n.ahead)))
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 30)
result.arima
tail(result.arima)
tail(result.arima, 30)
tail(result.arima, 1000)
tail(result.arima, 100)
head(ra)
head(ratedata)
str(ratedata)
str(ratedata$Date)
str(ratedata$DATE)
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$Date), "%d/%m/%Y"))
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$DATE), "%d/%m/%Y"))
str(ratedata)
ratedata[rowSums(is.na(ratedata)) == 0,]
colnames(ratedata)[3] <- "Date"
head(ratedata, 1)
str(ratedata$Date)
#order dates
ratedata <- ratedata[order(ratedata$Date), ]
# plot time series
plot(ratedata$Date, ratedata$Price, type = "l")
## Forecast with ARIMA model
forecastArima <- function(x, n.ahead=10){
myTs <- ts(x$Price, start=1, frequency=256)
fit.arima <- arima(myTs, order=c(0,0,1))
fore <- forecast(fit.arima, h=n.ahead)
plot(fore)
upper <- fore$upper[,'95%']
lower <- fore$lower[,'95%']
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)),
#pred = c(trend, pred),
pred = c(rep(NA, nrow(x)), pred),
lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper),
date = c(x$Date, max(x$Date) + (1:n.ahead))
)
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 30)
accuracy()
plotForecastResult <- function(x, title=NULL) {
x <- x[order(x$date),]
max.val <- max(c(x$actual, x$upper), na.rm=T)
min.val <- min(c(x$actual, x$lower), na.rm=T)
plot(x$date, x$actual, type="l", col="grey", main=title,
xlab="Time", ylab="Exchange Rate",
xlim=range(x$date), ylim=c(min.val, max.val))
grid()
lines(x$date, x$trend, col="yellowgreen")
lines(x$date, x$pred, col="green")
lines(x$date, x$lower, col="blue")
lines(x$date, x$upper, col="blue")
legend("bottomleft", col=c("grey", "yellowgreen", "green", "blue"), lty=1,
c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
}
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
result.arima
tail(result.arima)
result.arima <- forecastArima(ratedata, n.ahead = 10)
plotForecastResult <- function(x, title=NULL) {
x <- x[order(x$date),]
max.val <- max(c(x$actual, x$upper), na.rm=T)
min.val <- min(c(x$actual, x$lower), na.rm=T)
plot(x$date, x$actual, type="l", col="grey", main=title,
xlab="Time", ylab="Exchange Rate",
xlim=range(x$date), ylim=c(min.val, max.val))
grid()
lines(x$date, x$trend, col="yellowgreen")
lines(x$date, x$pred, col="green")
lines(x$date, x$lower, col="blue")
lines(x$date, x$upper, col="blue")
legend("bottomleft", col=c("grey", "yellowgreen", "green", "blue"), lty=1,
c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
}
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
tail(result.arima)
tail(result.arima, 10)
tail(result.arima, 200)
tail(result.arima, 20)
ratedata <- read.csv("~/Documents/NM/FOREX/2010USDPHPdata.csv", sep = ",", header = TRUE)
str(ratedata$DATE)
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$DATE), "%d/%m/%Y"))
ratedata
colnames(ratedata)[3] <- "Date"
head(ratedata, 1)
str(ratedata$Date)
#order dates
ratedata <- ratedata[order(ratedata$Date), ]
# plot time series
plot(ratedata$Date, ratedata$Price, type = "l")
## Forecast with ARIMA model
forecastArima <- function(x, n.ahead=5){
myTs <- ts(x$Price, start=1, frequency=256)
fit.arima <- arima(myTs, order=c(0,0,1))
fore <- forecast(fit.arima, h=n.ahead)
plot(fore)
upper <- fore$upper[,'95%']
lower <- fore$lower[,'95%']
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)),
#pred = c(trend, pred),
pred = c(rep(NA, nrow(x)), pred),
lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper),
date = c(x$Date, max(x$Date) + (1:n.ahead))
)
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 5)
plotForecastResult <- function(x, title=NULL) {
x <- x[order(x$date),]
max.val <- max(c(x$actual, x$upper), na.rm=T)
min.val <- min(c(x$actual, x$lower), na.rm=T)
plot(x$date, x$actual, type="l", col="grey", main=title,
xlab="Time", ylab="Exchange Rate",
xlim=range(x$date), ylim=c(min.val, max.val))
grid()
lines(x$date, x$trend, col="yellowgreen")
lines(x$date, x$pred, col="green")
lines(x$date, x$lower, col="blue")
lines(x$date, x$upper, col="blue")
legend("bottomleft", col=c("grey", "yellowgreen", "green", "blue"), lty=1,
c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
}
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
result.arima <- forecastArima(ratedata, n.ahead = 5)
tail(result.arima)
tail(result.arima, 10)
tail(result.arima, 30)
ratedata <- read.csv("~/Documents/NM/FOREX/latestUSDPHPdata.csv", sep = ",", header = TRUE)
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$DATE), "%d/%m/%Y"))
ratedata[rowSums(is.na(ratedata)) == 0,]
colnames(ratedata)[3] <- "Date"
head(ratedata, 1)
#order dates
ratedata <- ratedata[order(ratedata$Date), ]
################################################################################
#plot the time series
tsAud <- ts(ratedata$Price,frequency=7)
plot.ts(tsAud)
#Removing Seasonal Variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
tsAudSeasonalAdjusted <- tsAud - tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted)
#Exponential Smoothing
library(stats)
audHW <-HoltWinters(tsAud,beta=FALSE,gamma=FALSE)
plot(audHW)
#Forecasting
library(forecast)
audHWforecast <- forecast(audHW,h=30)
try1 <- forecast(ratedata$Price, h=10)
plot(audHWforecast)
accuracy(audHWforecast)
#plot the time series
tsAud <- ts(ratedata$Price,frequency=7)
plot.ts(tsAud)
#Exponential Smoothing
library(stats)
audHW <-HoltWinters(tsAud,beta=FALSE,gamma=FALSE)
plot(audHW)
#Forecasting
library(forecast)
audHWforecast <- forecast(audHW,h=30)
try1 <- forecast(audHW, h=10)
plot(audHWforecast)
accuracy(try1)
hist(audHWforecast$residuals, col="yellow")
dnormResiduals <- dnorm(audHWforecast$residuals,mean=mean(audHWforecast$residuals), sd=sd(audHWforecast$residuals) )
dev.new()
plot(audHWforecast$residuals,dnormResiduals,col="blue")
try1
try
try1$method
try1$model
try1$fitted
try1$lower
try1$upper
try1$x
try1$series
try1
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$DATE), "%d/%m/%Y"))
ratedata
ratedata <- read.csv("~/Documents/NM/FOREX/latestUSDPHPdata.csv", sep = ",", header = TRUE)
gc()
ratedata <- read.csv("~/Documents/NM/FOREX/latestUSDPHPdata.csv", sep = ",", header = TRUE)
head(ratedata)
str(ratedata$DATE)
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$DATE), "%d/%m/%Y"))
ratedata[rowSums(is.na(ratedata)) == 0,]
colnames(ratedata)[3] <- "Date"
str(ratedata$Date)
#order dates
ratedata <- ratedata[order(ratedata$Date), ]
# plot time series
plot(ratedata$Date, ratedata$Price, type = "l")
?ts
################################################################################
#plot the time series
tsAud <- ts(ratedata,frequency=5)
plot.ts(tsAud)
################################################################################
#plot the time series
tsAud <- ts(ratedata$Price,frequency=5)
plot.ts(tsAud)
################################################################################
#plot the time series
newdata <- ratedata[, c("Date", "Price")]
head(newdata)
str(newdata)
tsAud <- ts(newdata$Price,frequency=5)
plot.ts(tsAud)
?plot.ts
?ts
ts(1:10, frequency = 4, start = c(1959, 2)) # 2nd Quarter of 1959
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
# print.ts(.)
## Using July 1954 as start date:
gnp <- ts(cumsum(1 + round(rnorm(100), 2)),
start = c(1954, 7), frequency = 12)
plot(gnp) # using 'plot.ts' for time-series plot
tsAud <- ts(newdata$Price,start = c(2000, 7))
plot.ts(tsAud)
plot(gnp)
tsAud <- ts(newdata$Price,start = c(2000, 7), calendar = TRUE)
tsAud <- ts(newdata$Price,start = c(2000, 7), calendar = TRUE))
ratedata <- read.csv("~/Documents/NM/FOREX/latestUSDPHPdata.csv", sep = ",", header = TRUE)
head(ratedata)
str(ratedata$DATE)
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$DATE), "%d/%m/%Y"))
ratedata[rowSums(is.na(ratedata)) == 0,]
colnames(ratedata)[3] <- "Date"
head(ratedata, 1)
dim(ratedata)
# plot time series
plot(ratedata$Date, ratedata$Price, type = "l")
#Forecast Using ARIMA
library(forecast)
source("sourceCodes.R")
## Forecast with ARIMA model
forecastArima <- function(x, n.ahead=5){
myTs <- ts(x$Price, start=1, frequency=256)
fit.arima <- arima(myTs, order=c(0,0,1))
fore <- forecast(fit.arima, h=n.ahead)
plot(fore)
upper <- fore$upper[,'95%']
lower <- fore$lower[,'95%']
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$Price, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)),
#pred = c(trend, pred),
pred = c(rep(NA, nrow(x)), pred),
lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper),
date = c(x$Date, max(x$Date) + (1:n.ahead))
)
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 5)
plotForecastResult <- function(x, title=NULL) {
x <- x[order(x$date),]
max.val <- max(c(x$actual, x$upper), na.rm=T)
min.val <- min(c(x$actual, x$lower), na.rm=T)
plot(x$date, x$actual, type="l", col="grey", main=title,
xlab="Time", ylab="Exchange Rate",
xlim=range(x$date), ylim=c(min.val, max.val))
grid()
lines(x$date, x$trend, col="yellowgreen")
lines(x$date, x$pred, col="green")
lines(x$date, x$lower, col="blue")
lines(x$date, x$upper, col="blue")
legend("bottomleft", col=c("grey", "yellowgreen", "green", "blue"), lty=1,
c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
}
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
result.arima
tail(result.arima)
view(ratedata\)
view(ratedata)
accuracy(try1)
ratedata <- read.csv("~/Documents/FOREX/USDVolumesData.csv", sep = "\t", header = TRUE)
head(ratedata)
ratedata <- read.csv("~/Documents/FOREX/USDVolumesData.csv", sep = ",", header = TRUE)
head(ratedata)
str(ratedata)
dim(ratedata)
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$DATE), "%b %d, %Y"))
ratedata <- read.csv("~/Documents/FOREX/USDVolumesData.csv", sep = ",", header = TRUE)
ratedata <- read.csv("~/Documents/FOREX/USDVolumesData-Copy1.csv", sep = ",", header = TRUE)
head(ratedata)
dim(ratedata)
str(ratedata)
## convert into date format
ratedata$USD_Amount <- as.numeric(as.character(ratedata$USD_Amount))
ratedata <- read.csv("~/Documents/FOREX/USDVolumesData-Copy1.csv", sep = ",", header = TRUE)
head(ratedata)
str(ratedata)
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$DATE), "%m/%d/%Y"))
ratedata <- transform(ratedata, x = as.Date(as.character(ratedata$Date), "%m/%d/%Y"))
head(ratedata, 1)
colnames(ratedata)[3] <- "DATE"
head(ratedata, 1)
str(ratedata$DATE)
#Forecast Using ARIMA
library(forecast)
source("sourceCodes.R")
setwd("~/Documents/FOREX")
source("sourceCodes.R")
## Forecast with ARIMA model
forecastArima <- function(x, n.ahead=5){
myTs <- ts(x$USD_Amount, start=1, frequency=256)
fit.arima <- arima(myTs, order=c(0,0,1))
fore <- forecast(fit.arima, h=n.ahead)
plot(fore)
upper <- fore$upper[,'95%']
lower <- fore$lower[,'95%']
trend <- as.numeric(fore$fitted)
pred <- as.numeric(fore$mean)
output <- data.frame(actual = c(x$USD_Amount, rep(NA, n.ahead)),
trend = c(trend, rep(NA, n.ahead)),
#pred = c(trend, pred),
pred = c(rep(NA, nrow(x)), pred),
lower = c(rep(NA, nrow(x)), lower),
upper = c(rep(NA, nrow(x)), upper),
date = c(x$Date, max(x$Date) + (1:n.ahead))
)
return(output)
}
result.arima <- forecastArima(ratedata, n.ahead = 5)
plotForecastResult <- function(x, title=NULL) {
x <- x[order(x$date),]
max.val <- max(c(x$actual, x$upper), na.rm=T)
min.val <- min(c(x$actual, x$lower), na.rm=T)
plot(x$date, x$actual, type="l", col="grey", main=title,
xlab="Time", ylab="Exchange Rate",
xlim=range(x$date), ylim=c(min.val, max.val))
grid()
lines(x$date, x$trend, col="yellowgreen")
lines(x$date, x$pred, col="green")
lines(x$date, x$lower, col="blue")
lines(x$date, x$upper, col="blue")
legend("bottomleft", col=c("grey", "yellowgreen", "green", "blue"), lty=1,
c("Actual", "Trend", "Forecast", "Lower/Upper Bound"))
}
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
################################################################################
#plot the time series
tsAud <- ts(ratedata$USD_Amount,frequency=7)
plot.ts(tsAud)
#Removing Seasonal Variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
tsAudSeasonalAdjusted <- tsAud - tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted)
#Exponential Smoothing
library(stats)
audHW <-HoltWinters(tsAud,beta=FALSE,gamma=FALSE)
plot(audHW)
audHWforecast <- forecast(audHW,h=5)
try1 <- forecast(ratedata$USD_Amount, h=5)
plot(audHWforecast)
accuracy(audHWforecast)
